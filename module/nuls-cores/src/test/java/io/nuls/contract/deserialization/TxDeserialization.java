/**
 * MIT License
 * <p>
 * Copyright (c) 2017-2019 nuls.io
 * <p>
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * <p>
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package io.nuls.contract.deserialization;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.nuls.base.basic.AddressTool;
import io.nuls.base.basic.NulsByteBuffer;
import io.nuls.base.basic.NulsOutputStreamBuffer;
import io.nuls.base.basic.TransactionFeeCalculator;
import io.nuls.base.data.*;
import io.nuls.base.signture.P2PHKSignature;
import io.nuls.base.signture.SignatureUtil;
import io.nuls.base.signture.TransactionSignature;
import io.nuls.contract.model.txdata.CallContractData;
import io.nuls.contract.model.txdata.CreateContractData;
import io.nuls.core.crypto.HexUtil;
import io.nuls.core.exception.NulsException;
import io.nuls.core.parse.JSONUtils;
import io.nuls.core.parse.SerializeUtils;
import io.nuls.core.rpc.model.ApiModelProperty;
import org.apache.commons.io.FileUtils;
import org.bouncycastle.util.encoders.Hex;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.math.BigInteger;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * @author: PierreLuo
 * @date: 2019-07-15
 */
public class TxDeserialization {

    @Test
    public void testTxSize() throws Exception {
        String tx = "";
        Transaction tx1 = new Transaction();
        tx1.parse(new NulsByteBuffer(HexUtil.decode(tx)));
        System.out.println(tx1.getFee());
        System.out.println(tx1.size());
        System.out.println(TransactionFeeCalculator.getNormalTxFee(tx1.size(), 100000));
    }

    @Test
    public void test() throws NulsException, JsonProcessingException {
        //String txStr1 = "1000ca58555d007c020001f7ec6473df12e751d64cf20a8baa7edd50810f81020002e76b5df12f6f8a00ba9910dc750d248aa0d86a370000000000000000000000000000000000000000000000000000000000000000010000000000000019000000000000000d6465706f736974466f724f776e0e28292072657475726e20766f6964008c0117020001f7ec6473df12e751d64cf20a8baa7edd50810f8102000100ba67f7050000000000000000000000000000000000000000000000000000000008309a49ca52c05d42000117020002e76b5df12f6f8a00ba9910dc750d248aa0d86a370200010000e1f5050000000000000000000000000000000000000000000000000000000000000000000000006a2103958b790c331954ed367d37bac901de5c2f06ac8368b37d7bd6cd5ae143c1d7e3473045022100851d60c37738ffbc4abee2072ccad3e1722ddff7eca2ff9c5653fba21a81c9a1022078b9693cd6325abe8009d5e30e0b7b29cf61df671425c1fa5d2ae6f01f7fef59";
        String txStr1 = "100062766d600232329c020001d5e0c14c896ccbcf3709ff73b8a91b78638502e9020002442c9ce5b42ececdd3a25efc9751b8bf9bb2d4560000000000000000000000000000000000000000000000000000000000000000400d0300000000001900000000000000087472616e7366657200020126744e554c536542614d743954663656766659667655464756716469795071464c665167394c610109323030303030303030400117020001d5e0c14c896ccbcf3709ff73b8a91b78638502e902000100818d5b00000000000000000000000000000000000000000000000000000000000000006a21022fb21df00d78dd85d4700a10da7021b3a84d2d9f5998f3eb3ac0e9e76d98246c473045022100f77b6c07dfe69c82719addc96f1c2d5f49990b3328beb5132030ff1ff4868b120220600f9b0c5c1e9e5e9e11d61cd4c9ddd86ba792e94dca233f61c07aecb5b594b2";

        Transaction tx1 = new Transaction();
        tx1.parse(new NulsByteBuffer(HexUtil.decode(txStr1)));

        CallContractData data = new CallContractData();
        data.parse(new NulsByteBuffer(tx1.getTxData()));
        System.out.println(JSONUtils.obj2PrettyJson(data));
        System.out.println(JSONUtils.obj2PrettyJson(tx1));

        //Transaction tx2 = new Transaction();
        //tx2.parse(new NulsByteBuffer(HexUtil.decode(txStr2)));
        //CoinData coinData2 = tx2.getCoinDataInstance();
        //
        //System.out.println(JSONUtils.obj2PrettyJson(tx2));
        TransactionSignature ts = new TransactionSignature();
        ts.parse(tx1.getTransactionSignature(), 0);
        System.out.println();

    }

    @Test
    public void callData() throws NulsException, JsonProcessingException {
        String callStr = "020001d5e0c14c896ccbcf3709ff73b8a91b78638502e9020002442c9ce5b42ececdd3a25efc9751b8bf9bb2d4560000000000000000000000000000000000000000000000000000000000000000400d0300000000001900000000000000087472616e7366657200020126744e554c536542614d743954663656766659667655464756716469795071464c665167394c610109323030303030303030";
        CallContractData data = new CallContractData();
        data.parse(HexUtil.decode(callStr), 0);
        System.out.println(JSONUtils.obj2PrettyJson(data));
    }

    @Test
    public void coinData() throws NulsException, JsonProcessingException {
        String callStr = "0117020001d5e0c14c896ccbcf3709ff73b8a91b78638502e902000100818d5b0000000000000000000000000000000000000000000000000000000000000000";
        CoinData data = new CoinData();
        data.parse(HexUtil.decode(callStr), 0);
        System.out.println(JSONUtils.obj2PrettyJson(data));
    }

    @Test
    public void type2test() throws NulsException, JsonProcessingException {
        String txStr2 = "02001819ea5d00008c01170197dca8cf9c55829194654add150940ed3ef78a3fa09802000100aa860100000000000000000000000000000000000000000000000000000000000800000000000000000001170197dca8cf4d11842d6939709656b45e590df76d29dcff020001000a000000000000000000000000000000000000000000000000000000000000000000000000000000692102f746e7d62a6c0cc12936673bbb1f23e1938b85f60e30fd2b1e8525bb2844ded046304402203f133dacbd3983e9b32ee47a004cd05660cdd9677868c0272890c708ab084f65022061aa83ba8f60d72939afa3713d6bc8cdeeaec7323d3e5fe72ee860d1dedfe715";
        Transaction tx2 = new Transaction();
        tx2.parse(new NulsByteBuffer(HexUtil.decode(txStr2)));
        CoinData coinData = tx2.getCoinDataInstance();

        System.out.println(JSONUtils.obj2PrettyJson(tx2));
        System.out.println(HexUtil.encode(tx2.getTransactionSignature()));
        Set<String> addressFromTX = SignatureUtil.getAddressFromTX(tx2, 2);
        System.out.println(AddressTool.getStringAddressByBytes(coinData.getFrom().get(0).getAddress()));
        System.out.println(addressFromTX);

        //TransactionSignature transactionSignature = new TransactionSignature();
        //transactionSignature.parse(tx2.getTransactionSignature(), 0);
        //List<P2PHKSignature> p2PHKSignatures = transactionSignature.getP2PHKSignatures();
    }

    @Test
    public void contractReturnTxTest() throws NulsException, JsonProcessingException {
        String receiveTxStr = "130084fdc05d000046000117010001c0ad4e32cd607169570bc7b246df19c1a148a9a9010001006233240000000000000000000000000000000000000000000000000000000000000000000000000000";
        String makeTxStr = "130084fdc05d000046000117010001c0ad4e32cd607169570bc7b246df19c1a148a9a901000100e59b1f0000000000000000000000000000000000000000000000000000000000000000000000000000";

        Transaction tx1 = new Transaction();
        tx1.parse(new NulsByteBuffer(HexUtil.decode(receiveTxStr)));

        System.out.println(JSONUtils.obj2PrettyJson(tx1));

        Transaction tx2 = new Transaction();
        tx2.parse(new NulsByteBuffer(HexUtil.decode(makeTxStr)));

        System.out.println(JSONUtils.obj2PrettyJson(tx2));
    }

    @Test
    public void test1() throws Exception {
        String txStr = "150037fa2b5d005700409452a3030000000000000000000000000000000000000000000000000000020002aefee5362dad1a404814709bfe1a9d91e988d6ef5b281974bdc4ac6b0590ea93079e4ef52ceecdb7db37737b32eb5e8b9e60e6618c0117020002aefee5362dad1a404814709bfe1a9d91e988d6ef0200010000409452a30300000000000000000000000000000000000000000000000000000890f46669c10fb6cd000117020002aefee5362dad1a404814709bfe1a9d91e988d6ef0200010000409452a3030000000000000000000000000000000000000000000000000000ffffffffffffffff00";
        Transaction tx = new Transaction();
        tx.parse(new NulsByteBuffer(HexUtil.decode(txStr)));
        CoinData coinData1 = tx.getCoinDataInstance();
        Deposit deposit = new Deposit();
        deposit.parse(new NulsByteBuffer(tx.getTxData()));
        System.out.println(JSONUtils.obj2PrettyJson(deposit));
        System.out.println(JSONUtils.obj2PrettyJson(tx));
    }

    @Test
    public void depositTest() throws Exception {
        //String asd = "808840e1e1020000000000000000000000000000000000000000000000000000010002edb1ef1966a161f15b50974ed793c049fa5c14eb2e5cb2b2fc3acce78f1d6d71ae1b18f4b58bf153bc3cc537b7fdd3667fd369be";
        //String asd = "80326b99dc020000000000000000000000000000000000000000000000000000010002a838b812b0cde89ed43402bdcd4830da8fa6d9932e5cb2b2fc3acce78f1d6d71ae1b18f4b58bf153bc3cc537b7fdd3667fd369be";
        String asd = "00e4b9fa91020000000000000000000000000000000000000000000000000000010002a838b812b0cde89ed43402bdcd4830da8fa6d9935820c4e21dcf018751e2b28b223a980a08906c1ead6edb9c02f003fbe3af4ae8";
        Deposit deposit = new Deposit();
        deposit.parse(new NulsByteBuffer(HexUtil.decode(asd)));
        System.out.println(AddressTool.getStringAddressByBytes(deposit.getAddress()));
        System.out.println(deposit.getAgentHash().toHex());
        //System.out.println(JSONUtils.obj2PrettyJson(deposit));
        // 2e5cb2b2fc3acce78f1d6d71ae1b18f4b58bf153bc3cc537b7fdd3667fd369be
        // 2e5cb2b2fc3acce78f1d6d71ae1b18f4b58bf153bc3cc537b7fdd3667fd369be
    }


    @Test
    public void testCreateContractData() throws NulsException, IOException {
        String dataHex = "";
        String dataHex1 = "";
        CreateContractData data = new CreateContractData();
        data.parse(new NulsByteBuffer(Hex.decode(dataHex + dataHex1)));
        byte[] code = data.getCode();
        FileUtils.writeByteArrayToFile(new File("/Users/pierreluo/IdeaProjects/nuls_newer_2.0/module/nuls-smart-contract/src/test/java/io/nuls/contract/deserialization/create.jar"), code, false);
        System.out.println(JSONUtils.obj2PrettyJson(data));
    }

    class Deposit extends BaseNulsData {
        @ApiModelProperty(description = "Entrusted amount")
        private BigInteger deposit;
        @ApiModelProperty(description = "Delegated nodesHASH")
        private NulsHash agentHash;
        @ApiModelProperty(description = "Entrusted account")
        private byte[] address;
        @ApiModelProperty(description = "Entrustment time")
        private transient long time;
        @ApiModelProperty(description = "state")
        private transient int status;
        @ApiModelProperty(description = "Entrusted transactionHASH")
        private transient NulsHash txHash;
        @ApiModelProperty(description = "The height at which the entrusted transaction is packaged")
        private transient long blockHeight = -1L;
        @ApiModelProperty(description = "Exit commission height")
        private transient long delHeight = -1L;

        /**
         * serialize important field
         */
        @Override
        protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
            stream.writeBigInteger(deposit);
            stream.write(address);
            stream.write(agentHash.getBytes());

        }

        @Override
        public void parse(NulsByteBuffer byteBuffer) throws NulsException {
            this.deposit = byteBuffer.readBigInteger();
            this.address = byteBuffer.readBytes(Address.ADDRESS_LENGTH);
            this.agentHash = byteBuffer.readHash();
        }

        @Override
        public int size() {
            int size = 0;
            size += SerializeUtils.sizeOfBigInteger();
            size += Address.ADDRESS_LENGTH;
            size += NulsHash.HASH_LENGTH;
            return size;
        }

        public BigInteger getDeposit() {
            return deposit;
        }

        public void setDeposit(BigInteger deposit) {
            this.deposit = deposit;
        }

        public NulsHash getAgentHash() {
            return agentHash;
        }

        public void setAgentHash(NulsHash agentHash) {
            this.agentHash = agentHash;
        }

        public long getTime() {
            return time;
        }

        public void setTime(long time) {
            this.time = time;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public NulsHash getTxHash() {
            return txHash;
        }

        public void setTxHash(NulsHash txHash) {
            this.txHash = txHash;
        }

        public long getBlockHeight() {
            return blockHeight;
        }

        public void setBlockHeight(long blockHeight) {
            this.blockHeight = blockHeight;
        }

        public long getDelHeight() {
            return delHeight;
        }

        public void setDelHeight(long delHeight) {
            this.delHeight = delHeight;
        }

        public byte[] getAddress() {
            return address;
        }

        public void setAddress(byte[] address) {
            this.address = address;
        }

        public Set<byte[]> getAddresses() {
            Set<byte[]> addressSet = new HashSet<>();
            addressSet.add(this.address);
            return addressSet;
        }

        @Override
        public Deposit clone() throws CloneNotSupportedException {
            return (Deposit) super.clone();
        }
    }

    class Agent extends BaseNulsData {

        /**
         * Node address
         * agent address
         **/
        @ApiModelProperty(description = "Node address")
        private byte[] agentAddress;

        /**
         * Packaging address
         * packing address
         **/
        @ApiModelProperty(description = "Block address")
        private byte[] packingAddress;

        /**
         * Reward Address
         * reward address
         * */
        @ApiModelProperty(description = "Reward Address")
        private byte[] rewardAddress;

        /**
         * Margin
         * deposit
         * */
        @ApiModelProperty(description = "Margin")
        private BigInteger deposit;

        /**
         * commission rate
         * commission rate
         * */
        @ApiModelProperty(description = "commission rate")
        private byte commissionRate;

        /**
         * Creation time
         * create time
         **/
        @ApiModelProperty(description = "Creation time")
        private transient long time;

        /**
         * Block height
         * block height
         * */
        @ApiModelProperty(description = "Block height")
        private transient long blockHeight = -1L;

        /**
         * The height of the block where the node is deregistered is located
         * Block height where the node logs out
         * */
        @ApiModelProperty(description = "Node deregistration height")
        private transient long delHeight = -1L;

        /**
         *0:Pending consensus unConsensus, 1:In consensus consensus
         * */
        @ApiModelProperty(description = "Status,0:Pending consensus unConsensus, 1:In consensus consensus")
        private transient int status;

        /**
         * Reputation value
         * credit value
         * */
        @ApiModelProperty(description = "Reputation value")
        private transient double creditVal;

        /**
         *  Total entrusted amount
         *Total amount entrusted
         * */
        @ApiModelProperty(description = "Total entrusted amount of nodes")
        private transient BigInteger totalDeposit = BigInteger.ZERO;

        /**
         * transactionHASH
         * transaction hash
         * */
        @ApiModelProperty(description = "Create transactions for this nodeHASH")
        private transient NulsHash txHash;

        /**
         * Number of participants in consensus
         * Participation in consensus
         * */
        @ApiModelProperty(description = "Number of participants in consensus")
        private transient int memberCount;

        /**
         *Aliases are not serialized
         * Aliases not serialized
         * */
        @ApiModelProperty(description = "net aliases")
        private transient String alais;
        @Override
        public int size() {
            int size = 0;
            size += SerializeUtils.sizeOfBigInteger();
            size += this.agentAddress.length;
            size += this.rewardAddress.length;
            size += this.packingAddress.length;
            size += 1;
            return size;
        }

        @Override
        protected void serializeToStream(NulsOutputStreamBuffer stream) throws IOException {
            stream.writeBigInteger(deposit);
            stream.write(agentAddress);
            stream.write(packingAddress);
            stream.write(rewardAddress);
            stream.write(this.commissionRate);
        }

        @Override
        public void parse(NulsByteBuffer byteBuffer) throws NulsException {
            this.deposit = byteBuffer.readBigInteger();
            this.agentAddress = byteBuffer.readBytes(Address.ADDRESS_LENGTH);
            this.packingAddress = byteBuffer.readBytes(Address.ADDRESS_LENGTH);
            this.rewardAddress = byteBuffer.readBytes(Address.ADDRESS_LENGTH);
            this.commissionRate = byteBuffer.readByte();
        }


        public byte[] getPackingAddress() {
            return packingAddress;
        }

        public void setPackingAddress(byte[] packingAddress) {
            this.packingAddress = packingAddress;
        }

        public int getStatus() {
            return status;
        }

        public void setStatus(int status) {
            this.status = status;
        }

        public byte getCommissionRate() {
            return commissionRate;
        }

        public void setCommissionRate(byte commissionRate) {
            this.commissionRate = commissionRate;
        }

        public long getBlockHeight() {
            return blockHeight;
        }

        public void setBlockHeight(long blockHeight) {
            this.blockHeight = blockHeight;
        }

        public void setCreditVal(double creditVal) {
            this.creditVal = creditVal;
        }

        public double getCreditVal() {
            return creditVal < 0d ? 0D : this.creditVal;
        }

        public double getRealCreditVal(){
            return this.creditVal;
        }

        public void setTxHash(NulsHash txHash) {
            this.txHash = txHash;
        }

        public NulsHash getTxHash() {
            return txHash;
        }

        public long getTime() {
            return time;
        }

        public void setTime(long time) {
            this.time = time;
        }

        public long getDelHeight() {
            return delHeight;
        }

        public void setDelHeight(long delHeight) {
            this.delHeight = delHeight;
        }

        public byte[] getAgentAddress() {
            return agentAddress;
        }

        public void setAgentAddress(byte[] agentAddress) {
            this.agentAddress = agentAddress;
        }

        public byte[] getRewardAddress() {
            return rewardAddress;
        }

        public void setRewardAddress(byte[] rewardAddress) {
            this.rewardAddress = rewardAddress;
        }

        public int getMemberCount() {
            return memberCount;
        }

        public void setMemberCount(int memberCount) {
            this.memberCount = memberCount;
        }


        public BigInteger getDeposit() {
            return deposit;
        }

        public void setDeposit(BigInteger deposit) {
            this.deposit = deposit;
        }

        public BigInteger getTotalDeposit() {
            return totalDeposit;
        }

        public void setTotalDeposit(BigInteger totalDeposit) {
            this.totalDeposit = totalDeposit;
        }

        @Override
        public Agent clone() throws CloneNotSupportedException {
            return (Agent) super.clone();
        }

        public Set<byte[]> getAddresses() {
            Set<byte[]> addressSet = new HashSet<>();
            addressSet.add(this.agentAddress);
            return addressSet;
        }

        public String getAlais() {
            return alais;
        }

        public void setAlais(String alais) {
            this.alais = alais;
        }
    }
}
