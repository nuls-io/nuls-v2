/*
 * MIT License
 *
 * Copyright (c) 2017-2019 nuls.io
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */

package io.nuls.transaction.model.bo;

/**
 * Transaction registration information class
 * @author: Charlie
 * @date: 2018/11/12
 */
public class TxRegister {

    /**
     * Transaction type
     */
    private int txType;

    /**
     * module code
     */
    private String moduleCode;

    /**
     * Is it a transaction generated by the system（Generate packaging nodes for block reward settlement、Red and yellow card punishment）This type of transaction is not included in the verification block size and does not require any transaction fees
     * Is a system to produce trading (packaged node generation, for the piece reward settlement, CARDS punishment),
     * trading in the validation of this kind of new type block size is not taken into account, the types of transactions do not need poundage
     */
    private boolean systemTx;


    /**
     * Is it an unlocked transaction
     * If it's an unlocking transaction
     */
    private boolean unlockTx;

    /**
     * Does the transaction require signature verification? All transactions generated by the system and some special transactions do not require signature verification in the same way as regular transactions, and additional logic will be provided for verification.
     * Whether the transaction requires verification of the signature, all system generated transactions and some special transactions,
     * does not need to verify the signature in the way of ordinary transactions, will provide additional logic for verification.
     */
    private boolean verifySignature;

    /**
     * Does the transaction require transaction module verification fees, notfalseDo not verify(Do not exclude each transaction validator from verifying themselves)
     */
    private boolean verifyFee;


    public int getTxType() {
        return txType;
    }

    public void setTxType(int txType) {
        this.txType = txType;
    }

    public boolean getSystemTx() {
        return systemTx;
    }

    public void setSystemTx(boolean systemTx) {
        this.systemTx = systemTx;
    }

    public boolean getUnlockTx() {
        return unlockTx;
    }

    public void setUnlockTx(boolean unlockTx) {
        this.unlockTx = unlockTx;
    }

    public boolean getVerifySignature() {
        return verifySignature;
    }

    public void setVerifySignature(boolean verifySignature) {
        this.verifySignature = verifySignature;
    }

    public String getModuleCode() {
        return moduleCode;
    }

    public void setModuleCode(String moduleCode) {
        this.moduleCode = moduleCode;
    }

    public boolean getVerifyFee() {
        return verifyFee;
    }

    public void setVerifyFee(boolean verifyFee) {
        this.verifyFee = verifyFee;
    }

    @Override
    public String toString() {
        return "TxRegister{" +
                "txType=" + txType +
                ", systemTx=" + systemTx +
                ", unlockTx=" + unlockTx +
                ", verifySignature=" + verifySignature +
                ", moduleCode='" + moduleCode + '\'' +
                '}';
    }

    @Override
    public int hashCode() {
        return this.getModuleCode().hashCode();
    }
}
